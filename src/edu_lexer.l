%{
    #include "edu_parser.h" // Generated by Yacc/Bison with Token definitions
    #include "edulang.h" // Own shared definitions
    int lineCount = 0;
%}
%option yylineno

alpha [a-zA-Z]
digit [0-9]

unary "++"|"--"

%% 
^"#include"[ ]*<.+\.h>      { if (debug) printf("FOUND : T_INCLUDE (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_INCLUDE; }
"int"                       { if (debug) printf("FOUND : T_INT (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_INT; }
"bool"                       { if (debug) printf("FOUND : T_BOOL (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_BOOL; }
"float"                     { if (debug) printf("FOUND : T_FLOAT (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_FLOAT; }
"char"                      { if (debug) printf("FOUND : T_CHAR (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_CHAR; }
"void"                      { if (debug) printf("FOUND : T_VOID (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_VOID; }
"for"                       { if (debug) printf("FOUND : T_FOR (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_FOR; }
"if"                        { if (debug) printf("FOUND : T_IF (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_IF; }
"else"                      { if (debug) printf("FOUND : T_ELSE (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_ELSE; }
"true"                      { if (debug) printf("FOUND : T_TRUE (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_TRUE; }
"false"                     { if (debug) printf("FOUND : T_FALSE (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_FALSE; }
"printf"                    { if (debug) printf("FOUND : T_PRINTF (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_PRINTF; }
"scanf"                     { if (debug) printf("FOUND : T_SCANF (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_SCANF; }
"return"                    { if (debug) printf("FOUND : T_RETURN (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_RETURN; }
[-]?{digit}+                { if (debug) printf("FOUND : T_NUMBER (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_NUMBER; }
[-]?{digit}+\.{digit}{1,6}  { if (debug) printf("FOUND : T_FLOAT_NUMBER (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_FLOAT_NUMBER; }
{alpha}({alpha}|{digit}|"_")*  { if (debug) printf("FOUND : T_IDENTIFIER (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_IDENTIFIER; }
{unary}                     { if (debug) printf("FOUND : T_UNARY (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_UNARY; }
"<="                        { if (debug) printf("FOUND : T_LESS_EQUAL (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_LESS_EQUAL; }
">="                        { if (debug) printf("FOUND : T_GREATER_EQUAL (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_GREATER_EQUAL; }
"=="                        { if (debug) printf("FOUND : T_EQUAL (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_EQUAL; }
"!="                        { if (debug) printf("FOUND : T_NOT_EQUAL (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_NOT_EQUAL; }
">"                         { if (debug) printf("FOUND : T_GREATER (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_GREATER; }
"<"                         { if (debug) printf("FOUND : T_LESS (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_LESS; }
"&&"                        { if (debug) printf("FOUND : T_AND (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_AND; }
"||"                        { if (debug) printf("FOUND : T_OR (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_OR; }
"+"                         { if (debug) printf("FOUND : T_ADD (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_ADD; }
"-"                         { if (debug) printf("FOUND : T_SUBTRACT (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_SUBTRACT; }
"/"                         { if (debug) printf("FOUND : T_DIVIDE (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_DIVIDE; }
"*"                         { if (debug) printf("FOUND : T_MULTIPLY (%s)\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_MULTIPLY; }
\/\/.*                      {
                             /* Skip single-line comment */ }
\/\*(.*\n)*.*\*\/           {
                             /* Skip multi-line comment */ }
[ \t]*                      {
                             /* Ignore whitespace */ }
[\n]                        {
                             lineCount++; 
                             if (debug) printf("Processed line %d\n", lineCount); }
.                           { if (debug) printf("FOUND TOKEN: %s\n", yytext);
                             return *yytext; }
["].*["]                    { if (debug) printf("FOUND T_STRING: %s\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_STRING; }
['].[']                     { if (debug) printf("FOUND T_CHARACTER: %s\n", yytext);
                             strcpy(yylval.node.name, yytext); return T_CHARACTER; }

%%

int yywrap() {
    return 1;
}