%{
#include "parser.h" // Generated by Yacc/Bison with token definitions
#include "compiler.h"
%}

%%
"[" {
 if (debug) printf("Token: LBRACKET\n");
 return LBRACKET;
}
"]" {
 if (debug) printf("Token: RBRACKET\n");
 return RBRACKET;
}
"(" { 
 if (debug) printf("Token: LPAREN\n"); 
 return LPAREN; 
}
")" { 
 if (debug) printf("Token: RPAREN\n"); 
 return RPAREN; 
}
"+" { 
 if (debug) printf("Token: PLUS\n"); 
 return PLUS; 
}
"-" { 
 if (debug) printf("Token: MINUS\n"); 
 return MINUS; 
}
"*" { 
 if (debug) printf("Token: MULT\n"); 
 return MULT; 
}
"/" { 
 if (debug) printf("Token: DIV\n"); 
 return DIV; 
}


"if" { 
 if (debug) printf("Token: IF\n");
 return IF;
}
"else" { 
 if (debug) printf("Token: ELSE\n");
 return ELSE;
}
"while" { 
 if (debug) printf("Token: WHILE\n");
 return WHILE;
}
"for" {
 if (debug) printf("Token: FOR\n");
 return FOR;
}
"break" {
 if (debug) printf("Token: BREAK\n");
 return BREAK;
}
"continue" {
 if (debug) printf("Token: CONTINUE\n");
 return CONTINUE;
}
"return" {
 if (debug) printf("Token: RETURN\n");
 return RETURN;
}
"switch" {
 if (debug) printf("Token: SWITCH\n");
 return SWITCH;
}
"case" {
 if (debug) printf("Token: CASE\n");
 return CASE;
}
"default" {
 if (debug) printf("Token: DEFAULT\n");
 return DEFAULT;
}
"print" { 
 if (debug) printf("Token: PRINTFUNC\n"); 
 return PRINTFUNC; 
}

[0-9]+ { 
 if (debug) printf("Token: INTEGER, Value: %s\\n", yytext); 
 yylval.intValue = atoi(yytext); 
 return INTEGER; 
}
[0-9]+\.[0-9]* {
 if (debug) printf("Token: FLOAT, Value: %s\\n", yytext);
 yylval.floatValue = atof(yytext);
 return FLOAT;
}
"true"|"false" {
 if (debug) printf("Token: BOOLEAN, Value: %s\\n", yytext);
 yylval.boolValue = (strcmp(yytext, "true") == 0);
 return BOOLEAN;
}
'(\\.|[^'\\])' {
 if (debug) printf("Token: CHAR, Value: %s\n", yytext);
 if (yytext[1] == '\\') {
 switch(yytext[2]) {
 case 'n': yylval.charValue = '\n'; break;
 case 't': yylval.charValue = '\t'; break;
 case '\\': yylval.charValue = '\\'; break;
 case '\'': yylval.charValue = '\''; break;
 default: 
 if (debug) printf("Invalid escape sequence: %s\n", yytext);
 return ERROR;
 }
 } else {
 yylval.charValue = yytext[1];
 }
 return CHAR;
}

\"[^\"]*\" {
 if (debug) printf("Token: STRING, Value: %s\n", yytext);
 yylval.stringValue = strdup(yytext);
 return STRING;
}
[a-zA-Z_][a-zA-Z0-9_]* {
 if (debug) printf("Token: IDENTIFIER, Value: %s\n", yytext);
 yylval.stringValue = strdup(yytext);
 return IDENTIFIER;
}

"//".* { /* Ignore single line comments */ }

"/*"(.|\n)*?"*/" { /* Ignore block comments */ }

"\n" { /* Ignore new lines */ }
[ \t]+ { /* Ignore whitespace */ }
. { /* Catch-all for any other characters */
 if (debug) printf("Unrecognized Token: %s\n", yytext);
 return UNDEFINED;
}


%%

int yywrap() {
 return 1;
}
