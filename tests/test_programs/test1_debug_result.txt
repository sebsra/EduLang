FOUND : T_INCLUDE (#include <stdio.dot>)
Processed line 2
FOUND : T_INCLUDE (#include <stdbool.dot>)
Processed line 3
Processed line 4
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (main)
FOUND TOKEN: (
FOUND TOKEN: )
Processed line 5
FOUND TOKEN: {
Processed line 6
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (number)
FOUND TOKEN: =
FOUND : T_NUMBER (10)
FOUND TOKEN: ;
Processed line 7
FOUND : T_FLOAT (float)
FOUND : T_IDENTIFIER (float_number)
FOUND TOKEN: =
FOUND : T_FLOAT_NUMBER (10.5)
FOUND TOKEN: ;
Processed line 8
FOUND : T_CHAR (char)
FOUND : T_IDENTIFIER (character)
FOUND TOKEN: =
FOUND T_CHARACTER: 'a'
FOUND TOKEN: ;
Processed line 9
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (unary)
FOUND TOKEN: =
FOUND : T_UNARY (++)
FOUND : T_IDENTIFIER (number)
FOUND TOKEN: ;
Processed line 10
FOUND : T_BOOL (bool)
FOUND : T_IDENTIFIER (less_equal)
FOUND TOKEN: =
FOUND : T_NUMBER (5)
FOUND : T_LESS_EQUAL (<=)
FOUND : T_NUMBER (10)
FOUND TOKEN: ;
Processed line 11
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (greater_equal)
FOUND TOKEN: =
FOUND : T_NUMBER (10)
FOUND : T_GREATER_EQUAL (>=)
FOUND : T_NUMBER (5)
FOUND TOKEN: ;
Processed line 12
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (equal)
FOUND TOKEN: =
FOUND : T_NUMBER (10)
FOUND : T_EQUAL (==)
FOUND : T_NUMBER (10)
FOUND TOKEN: ;
Processed line 13
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (not_equal)
FOUND TOKEN: =
FOUND : T_NUMBER (10)
FOUND : T_NOT_EQUAL (!=)
FOUND : T_NUMBER (5)
FOUND TOKEN: ;
Processed line 14
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (greater)
FOUND TOKEN: =
FOUND : T_NUMBER (10)
FOUND : T_GREATER (>)
FOUND : T_NUMBER (5)
FOUND TOKEN: ;
Processed line 15
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (less)
FOUND TOKEN: =
FOUND : T_NUMBER (5)
FOUND : T_LESS (<)
FOUND : T_NUMBER (10)
FOUND TOKEN: ;
Processed line 16
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (and)
FOUND TOKEN: =
FOUND : T_NUMBER (1)
FOUND : T_AND (&&)
FOUND : T_NUMBER (0)
FOUND TOKEN: ;
Processed line 17
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (or)
FOUND TOKEN: =
FOUND : T_NUMBER (1)
FOUND : T_OR (||)
FOUND : T_NUMBER (0)
FOUND TOKEN: ;
Processed line 18
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (add)
FOUND TOKEN: =
FOUND : T_NUMBER (5)
FOUND : T_ADD (+)
FOUND : T_NUMBER (5)
FOUND TOKEN: ;
Processed line 19
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (subtract)
FOUND TOKEN: =
FOUND : T_NUMBER (10)
FOUND : T_SUBTRACT (-)
FOUND : T_NUMBER (5)
FOUND TOKEN: ;
Processed line 20
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (divide)
FOUND TOKEN: =
FOUND : T_NUMBER (10)
FOUND : T_DIVIDE (/)
FOUND : T_NUMBER (2)
FOUND TOKEN: ;
Processed line 21
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (multiply)
FOUND TOKEN: =
FOUND : T_NUMBER (5)
FOUND : T_MULTIPLY (*)
FOUND : T_NUMBER (2)
FOUND TOKEN: ;
Processed line 22
Processed line 23
FOUND : T_IF (if)
FOUND TOKEN: (
FOUND : T_IDENTIFIER (number)
FOUND : T_GREATER (>)
FOUND : T_NUMBER (5)
FOUND TOKEN: )
Processed line 24
FOUND TOKEN: {
Processed line 25
FOUND : T_PRINTF (printf)
FOUND TOKEN: (
FOUND T_STRING: "Number is greater than 5\n"
FOUND TOKEN: )
FOUND TOKEN: ;
Processed line 26
FOUND TOKEN: }
Processed line 27
FOUND : T_ELSE (else)
Processed line 28
FOUND TOKEN: {
Processed line 29
FOUND : T_PRINTF (printf)
FOUND TOKEN: (
FOUND T_STRING: "Number is not greater than 5\n"
FOUND TOKEN: )
FOUND TOKEN: ;
Processed line 30
FOUND TOKEN: }
Processed line 31
Processed line 32
FOUND : T_FOR (for)
FOUND TOKEN: (
FOUND : T_INT (int)
FOUND : T_IDENTIFIER (i)
FOUND TOKEN: =
FOUND : T_NUMBER (0)
FOUND TOKEN: ;
FOUND : T_IDENTIFIER (i)
FOUND : T_LESS (<)
FOUND : T_NUMBER (10)
FOUND TOKEN: ;
FOUND : T_IDENTIFIER (i)
FOUND : T_UNARY (++)
FOUND TOKEN: )
Processed line 33
FOUND TOKEN: {
Processed line 34
FOUND : T_PRINTF (printf)
FOUND TOKEN: (
FOUND T_STRING: "string_example"
FOUND TOKEN: )
FOUND TOKEN: ;
Processed line 35
FOUND TOKEN: }
Processed line 36
Processed line 37
FOUND : T_RETURN (return)
FOUND : T_NUMBER (0)
FOUND TOKEN: ;
Processed line 38
FOUND TOKEN: }